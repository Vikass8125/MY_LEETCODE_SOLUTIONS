Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

 

Example 1:

Input: nums = [0,2,1,5,3,4]
Output: [0,1,2,4,5,3]
Explanation: The array ans is built as follows: 
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[0], nums[2], nums[1], nums[5], nums[3], nums[4]]
    = [0,1,2,4,5,3]
Example 2:

Input: nums = [5,0,1,2,3,4]
Output: [4,5,0,1,2,3]
Explanation: The array ans is built as follows:
ans = [nums[nums[0]], nums[nums[1]], nums[nums[2]], nums[nums[3]], nums[nums[4]], nums[nums[5]]]
    = [nums[5], nums[0], nums[1], nums[2], nums[3], nums[4]]
    = [4,5,0,1,2,3]
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] < nums.length
The elements in nums are distinct.
 

Follow-up: Can you solve it without using an extra space (i.e., O(1) memory)?


MY_SOLUTION
class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i = 0; i < nums.length; i++){
            ans[i] = nums[nums[i]];
        }
        return ans;
    }
}


O(1) approach

	  I am just explaining O(1) space complexity approach and it can be implemented using any language. i am also sharing the c++ code.
let a = nums[i] and b= nums[nums[i]]
let nums=[0,2,1,5,3,4]
if a = nums[3] = 5 then b = nums[nums[3]] = nums[5] = 4
a+nb = 5 + 64 = 29
29%n = 29 % 6 = 5 = a; so formula for a = (a+nb)%n
29/n = 29/6 = 4 = b ; so formula for b = (a+nb)/n

so in the first step we will be calculating a+nb for each index and replacing element at this value by the obtained result.
i.e,
for(int i=0;i<n;i++)
{
nums[i] = nums[i]+(n*(nums[nums[i]]%n)); // here %n is takrn to compensate the changes happened in previous iteration and get exat value of b;
}
in the next step we just have to replace value at each index by num[i]/n to get b which is equal to nums[nums[i]] ;
i.e,
for(int i=0;i<n;i++)
{
nums[i]/=n;
}
and nums is the vector to be returned;

FULL CODE
vector buildArray(vector& nums)
{

    int n = nums.size();
    for(int i=0;i<n;i++)
    {
        nums[i] = nums[i]+(n*(nums[nums[i]]%n));
    }
    for(int i=0;i<n;i++)
    {
        nums[i]/=n;
    }
    return nums;
}
