Given a non-ne

gative integer x, compute and return the square root of x.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.

Note: You are not allowed to use any built-in exponent function or operator, such as pow(x, 0.5) or x ** 0.5.

 

Example 1:

Input: x = 4
Output: 2
Example 2:

Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.
 

Constraints:

0 <= x <= 231 - 1


MY_SOLUTION


class Solution {
    public int mySqrt(int x) {
        long start = 1;
        long end = x;
        while(start <= end){
            long mid = start + (end - start)/2;
            if(mid * mid > x){
                end = mid - 1;
            }
            else if(mid * mid < x){
                start = mid + 1;
            }
            else{
                return (int)mid;
            }
          
        }
           return (int)end;
       
        
    }
}



ANOTHER_SOLUTION


Approach:

Intuitive Brute force solution would be O(n) as we check every element from 0 to x/2
The next better time complexity we can target it O(logN) which suggests at using binary search.
Algorithm:

start with a range between 1 to x/2 (square root of any number can not be greater than half of the number)
find the mid point and calculate the x/mid as quotient
we go for division instead of multiplication to avoid unwanted overflow
If quotient == mid; we have our answer
If quotient > mid; move start to mid; not to mid + 1 as mid might be a valid answer
if quotient < mid; move end to mid-1
// using binary search
class Solution {
    public int mySqrt(int x) {
        if(x <= 1) return x;
        int start = 1;
        int end = x/2;
        
        while(start < end) {
            // start is not always moving and hence we can get stuck in infinite loop with mid calculation
            // Adding 1 to mid everytime to ensure we always move the mid
            int mid = (start + (end-start)/2) + 1;
            
            // use division instead of multiplication to avoid overflow
            int div = x/mid;
            if(div == mid) return mid;
            if(div > mid) start = mid;
            else end = mid-1;
        }
        
        return start;
    }
}
