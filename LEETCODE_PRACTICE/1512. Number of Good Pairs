Given an array of integers nums, return the number of good pairs.

A pair (i, j) is called good if nums[i] == nums[j] and i < j.

 

Example 1:

Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.
Example 2:

Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.
Example 3:

Input: nums = [1,2,3]
Output: 0
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100



MY_SOLUTION
Method - 1: We can use two for loops and check is nums[i] = nums[j] and i < j and simply increase count by one every time. 

class Solution {
    public int numIdenticalPairs(int[] nums) {
        int count = 0;
        for(int i = 0; i < nums.length; i++){
            for(int j = i+1; j < nums.length; j++){
                if(nums[i] == nums[j]){
                    count++;
                }
            }
        }
        return count;
        }
        
   }

Method - 2 : First we can count the frequency of each numbers using array. If a number appears n times, then n * (n â€“ 1) / 2 pairs can be made with this number.



class Solution {
    public int numIdenticalPairs(int[] nums) {
        
        int result = 0;
        int[] count = new int[101];
        for(int num : nums){
            count[num]++;
        }
        
        for(int num : count){
            result = result + (num*(num-1)/2);
        }
        return result;
    }
}


ANOTHER_SOLUTION

class Solution {
    public int numIdenticalPairs(int[] nums) {
        HashMap<Integer,Integer> map = new HashMap<Integer,Integer>();
        int answer = 0;
        for(int i: nums){
            if(map.containsKey(i)){ // if number has occurred before
                int temp = map.get(i);
                answer += temp; // add number of occurrences to the answer
                map.put(i,temp+1); // increment number of occurrences
            } else {
                map.put(i,1); // if it is the first time, add it to the map
            }
        }
        return answer;
    }
}
PROBLEM OVERVIEW
The basic premise of the prolem is to find of many times nums[i] == nums[j], where j > i
We are esentially tasked with finding the number of repeats after first occurence of each number.

ASSESSING SOLUTIONS
A hashmap is great for this solution as we can looop through the array of numbers and have 1 of 2 states:

if it exists, then add the number of currently stores and subsequently increment it
otherwise, set that value as 1 (it exists)
The code is O(n), as it iterates through the entire array

EXPLANATIONS
Here's a way to visualize it. If I have [1,1], then there is only 1 "good pair," which is the first and second 1. (0+1 = 1)
If I have [1,1,1] then there are 3 "good pairs" ([first,second], [second,third,], [first,third]).
The first 1 has 0 pairs, the second 1 has 1 pair, and the third 1 has 2 pairs. (0+1+2 = 3)!
Likeswise for [1,1,1,1] there are 6 "good pairs" (0+1+2+3 = 6)

From this, we can conclude the pattern is for every subsequent repeat of a number, the number of combinations increases by the current 
number of appearances of that number.

In the code, we demonstrate this by incrementing the value in the map by one everytime, signaling the next occurence to add to "answers" one 
more combination than before.

